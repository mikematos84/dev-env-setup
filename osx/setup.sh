#!/usr/bin/env bash
set -euo pipefail

CONFIG_FILE=""
BASE_CONFIG=""

# Parse arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    -c|--config)
      CONFIG_FILE="$2"
      shift 2
      ;;
    -h|--help)
      echo "Usage: $0 [OPTIONS]"
      echo ""
      echo "Options:"
      echo "  -c, --config FILE    Override config file to merge with base config"
      echo "  -h, --help          Show this help message"
      echo ""
      echo "The script will:"
      echo "  1. Use config.base.yaml if available, otherwise config.yaml"
      echo "  2. Merge with --config file if provided"
      echo "  3. Create installed.yaml with the final configuration"
      echo "  4. Install required applications and tools"
      exit 0
      ;;
    *)
      echo "Unknown argument: $1"
      echo "Use --help for usage information"
      exit 1
      ;;
  esac
done

# Pick base config: config.base.yaml > config.yaml
if [[ -f "config.base.yaml" ]]; then
  BASE_CONFIG="config.base.yaml"
elif [[ -f "config.yaml" ]]; then
  BASE_CONFIG="config.yaml"
else
  echo "‚ùå No base config found (expected config.base.yaml or config.yaml)"
  exit 1
fi

echo "‚úÖ Base config: $BASE_CONFIG"

# Final merged config with metadata
INSTALLED_CONFIG="installed.yaml"

# Create installed.yaml with metadata
cat > "$INSTALLED_CONFIG" << EOF
# Generated by dev-env-setup on $(date -u +"%Y-%m-%dT%H:%M:%SZ")
# Base config: $BASE_CONFIG
# Override config: ${CONFIG_FILE:-"none"}
# Setup version: 1.0.0
---
EOF

if [[ -n "$CONFIG_FILE" ]]; then
  echo "üîÑ Merging with override: $CONFIG_FILE"
  # yq handles deep merge: override takes precedence
  yq eval-all 'select(fileIndex == 0) * select(fileIndex == 1)' "$BASE_CONFIG" "$CONFIG_FILE" >> "$INSTALLED_CONFIG"
else
  cat "$BASE_CONFIG" >> "$INSTALLED_CONFIG"
fi

echo "üì¶ Using merged config: $INSTALLED_CONFIG"

# --- Install Brew if missing ---
if ! command -v brew >/dev/null 2>&1; then
  echo "üç∫ Installing Homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

# --- Install apps ---
APPS=$(yq e '.apps[] | select(.required == true) | .name' "$INSTALLED_CONFIG")
if [[ -n "$APPS" ]]; then
  echo "üì¶ Installing apps: $APPS"
  brew install --cask $APPS
fi

# --- Install NVM + latest Node ---
if ! command -v nvm >/dev/null 2>&1; then
  echo "‚¨áÔ∏è Installing NVM..."
  brew install nvm
  mkdir -p ~/.nvm
  export NVM_DIR="$HOME/.nvm"
  source "$(brew --prefix nvm)/nvm.sh"
fi

echo "‚¨áÔ∏è Installing latest Node.js..."
nvm install node
nvm alias default node

# --- Extra package managers ---
brew install yarn pnpm

# --- Git config ---
GIT_NAME=$(yq e '.git.user.name // ""' "$INSTALLED_CONFIG")
GIT_EMAIL=$(yq e '.git.user.email // ""' "$INSTALLED_CONFIG")

if [[ -n "$GIT_NAME" && -n "$GIT_EMAIL" ]]; then
  echo "‚öôÔ∏è Setting git config"
  git config --global user.name "$GIT_NAME"
  git config --global user.email "$GIT_EMAIL"
fi

echo "‚úÖ Setup complete!"
