#!/usr/bin/env bash
set -euo pipefail

CONFIG_FILE=""
BOOTSTRAP_CONFIG="../bootstrap.yaml"

# Parse arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    -c|--config)
      CONFIG_FILE="$2"
      shift 2
      ;;
    -h|--help)
      echo "Usage: $0 [OPTIONS]"
      echo ""
      echo "Options:"
      echo "  -c, --config FILE    Override config file to merge with base config"
      echo "  -h, --help          Show this help message"
      echo ""
      echo "The script will:"
      echo "  1. Use bootstrap.yaml from project root"
      echo "  2. Extract OSX platform configuration"
      echo "  3. Merge global packages with OSX-specific packages"
      echo "  4. Create installed.yaml with the final configuration"
      echo "  5. Install required applications and tools"
      exit 0
      ;;
    *)
      echo "Unknown argument: $1"
      echo "Use --help for usage information"
      exit 1
      ;;
  esac
done

# Check for config
if [[ ! -f "$BOOTSTRAP_CONFIG" ]]; then
  echo "‚ùå Config not found: $BOOTSTRAP_CONFIG"
  echo "üí° Make sure you're running this from the osx/ directory"
  exit 1
fi

echo "‚úÖ Using config: $BOOTSTRAP_CONFIG"

# Final merged config with metadata
INSTALLED_CONFIG="installed.yaml"

# Create installed.yaml with metadata
cat > "$INSTALLED_CONFIG" << EOF
# Generated by dev-env-setup on $(date -u +"%Y-%m-%dT%H:%M:%SZ")
# Base config: $BOOTSTRAP_CONFIG
# Override config: ${CONFIG_FILE:-"none"}
# Platform: osx
# Setup version: 1.0.0
---
EOF

# Extract OSX platform config and merge with global packages
if [[ -n "$CONFIG_FILE" ]]; then
  echo "üîÑ Merging with override: $CONFIG_FILE"
  # Extract OSX platform config, merge with global packages, then apply override
  yq e '
    .packages as $global |
    .platforms.osx as $osx |
    {
      packages: ($global + $osx.packages),
      configs: .configs,
      platform: $osx
    } |
    . * load("'$CONFIG_FILE'")
  ' "$BOOTSTRAP_CONFIG" >> "$INSTALLED_CONFIG"
else
  # Extract OSX platform config and merge with global packages
  yq e '
    .packages as $global |
    .platforms.osx as $osx |
    {
      packages: ($global + $osx.packages),
      configs: .configs,
      platform: $osx
    }
  ' "$BOOTSTRAP_CONFIG" >> "$INSTALLED_CONFIG"
fi

echo "üì¶ Using merged config: $INSTALLED_CONFIG"

# --- Install Brew if missing ---
if ! command -v brew >/dev/null 2>&1; then
  echo "üç∫ Installing Homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

# --- Install packages ---
echo "üì¶ Installing packages..."

# Get all packages (global + OSX-specific)
PACKAGES=$(yq e '.packages[]' "$INSTALLED_CONFIG")

if [[ -n "$PACKAGES" ]]; then
  echo "üì¶ Processing packages..."
  
  # Process packages using Homebrew
  for package in $PACKAGES; do
    # Check if package is a simple string or an object
    if echo "$package" | grep -q "name:"; then
      # It's an object, extract name and check for install
      PACKAGE_NAME=$(echo "$package" | yq e '.name' -)
      SHOULD_INSTALL=$(echo "$package" | yq e '.install // true' -)
      RUN_COMMANDS=$(echo "$package" | yq e '.run // ""' -)
      
      if [[ "$SHOULD_INSTALL" == "false" ]]; then
        echo "  Skipping installation of $PACKAGE_NAME (install: false)"
      else
        echo "  Installing: $PACKAGE_NAME"
        if [[ "$PACKAGE_NAME" =~ ^(iterm2|visual-studio-code|slack|zoom|microsoft-teams|docker)$ ]]; then
          # Install as cask (GUI applications)
          brew install --cask "$PACKAGE_NAME" || echo "  ‚ö†Ô∏è Failed to install $PACKAGE_NAME (cask)"
        else
          # Install as formula (command line tools)
          brew install "$PACKAGE_NAME" || echo "  ‚ö†Ô∏è Failed to install $PACKAGE_NAME (formula)"
        fi
      fi
      
      # Execute run commands if specified
      if [[ -n "$RUN_COMMANDS" && "$RUN_COMMANDS" != "null" ]]; then
        echo "  Running post-install commands for $PACKAGE_NAME..."
        echo "$RUN_COMMANDS" | while IFS= read -r line; do
          line=$(echo "$line" | sed 's/^[[:space:]]*//')  # Trim leading whitespace
          if [[ -n "$line" && ! "$line" =~ ^# ]]; then  # Skip empty lines and comments
            echo "    Executing: $line"
            eval "$line" || echo "    ‚ö†Ô∏è Command failed: $line"
          fi
        done
      fi
    else
      # It's a simple string package
      echo "  Installing: $package"
      if [[ "$package" =~ ^(iterm2|visual-studio-code|slack|zoom|microsoft-teams|docker)$ ]]; then
        # Install as cask (GUI applications)
        brew install --cask "$package" || echo "  ‚ö†Ô∏è Failed to install $package (cask)"
      else
        # Install as formula (command line tools)
        brew install "$package" || echo "  ‚ö†Ô∏è Failed to install $package (formula)"
      fi
    fi
  done
else
  echo "‚ÑπÔ∏è No packages to install"
fi

# --- Install NVM + latest Node ---
if ! command -v nvm >/dev/null 2>&1; then
  echo "‚¨áÔ∏è Installing NVM..."
  brew install nvm
  mkdir -p ~/.nvm
  export NVM_DIR="$HOME/.nvm"
  source "$(brew --prefix nvm)/nvm.sh"
fi

echo "‚¨áÔ∏è Installing latest Node.js..."
nvm install node
nvm alias default node

# --- Execute global configurations ---
echo "‚öôÔ∏è Executing global configurations..."
GLOBAL_CONFIGS=$(yq e '.configs // {}' "$INSTALLED_CONFIG")
if [[ "$GLOBAL_CONFIGS" != "{}" && "$GLOBAL_CONFIGS" != "null" ]]; then
  # Get all config names
  CONFIG_NAMES=$(echo "$GLOBAL_CONFIGS" | yq e 'keys[]' -)
  for config_name in $CONFIG_NAMES; do
    RUN_COMMANDS=$(echo "$GLOBAL_CONFIGS" | yq e ".$config_name.run // \"\"" -)
    if [[ -n "$RUN_COMMANDS" && "$RUN_COMMANDS" != "null" && "$RUN_COMMANDS" != "" ]]; then
      echo "  Running global config for $config_name..."
      echo "$RUN_COMMANDS" | while IFS= read -r line; do
        line=$(echo "$line" | sed 's/^[[:space:]]*//')  # Trim leading whitespace
        if [[ -n "$line" && ! "$line" =~ ^# ]]; then  # Skip empty lines and comments
          echo "    Executing: $line"
          eval "$line" || echo "    ‚ö†Ô∏è Command failed: $line"
        fi
      done
    fi
  done
fi

# --- Execute platform-specific configurations ---
echo "‚öôÔ∏è Executing OSX-specific configurations..."
PLATFORM_CONFIGS=$(yq e '.platform.configs // {}' "$INSTALLED_CONFIG")
if [[ "$PLATFORM_CONFIGS" != "{}" && "$PLATFORM_CONFIGS" != "null" ]]; then
  # Get all config names
  CONFIG_NAMES=$(echo "$PLATFORM_CONFIGS" | yq e 'keys[]' -)
  for config_name in $CONFIG_NAMES; do
    RUN_COMMANDS=$(echo "$PLATFORM_CONFIGS" | yq e ".$config_name.run // \"\"" -)
    if [[ -n "$RUN_COMMANDS" && "$RUN_COMMANDS" != "null" && "$RUN_COMMANDS" != "" ]]; then
      echo "  Running OSX-specific config for $config_name..."
      echo "$RUN_COMMANDS" | while IFS= read -r line; do
        line=$(echo "$line" | sed 's/^[[:space:]]*//')  # Trim leading whitespace
        if [[ -n "$line" && ! "$line" =~ ^# ]]; then  # Skip empty lines and comments
          echo "    Executing: $line"
          eval "$line" || echo "    ‚ö†Ô∏è Command failed: $line"
        fi
      done
    fi
  done
fi

echo "‚úÖ Setup complete!"
